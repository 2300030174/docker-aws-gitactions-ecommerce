name: Deploy Ecommerce Fullstack App on EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            echo "=== Starting deployment ==="
            cd /home/ubuntu

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update -y
              sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi

            # Create project directory if it doesn't exist
            mkdir -p ecommercefullstack
            cd ecommercefullstack

            echo "=== Copying files from GitHub runner ==="
            # Copy backend and frontend code from runner
            cp -r /home/runner/work/${{ github.repository }}/* .

            # Stop running containers
            docker compose down || true

            # Clean old containers, networks, volumes
            docker system prune -f || true

            # Ensure docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "Creating docker-compose.yml..."
              cat > docker-compose.yml << 'EOF'
services:
  db:
    image: mysql:8.0
    container_name: home_services-db
    restart: always
    environment:
      MYSQL_DATABASE: home_services_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - home_services-net

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: home_services-backend
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/home_services_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    depends_on:
      - db
    ports:
      - "5001:5001"
    networks:
      - home_services-net

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: home_services-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - home_services-net

volumes:
  db_data:

networks:
  home_services-net:
    driver: bridge
EOF
            fi

            # Build and start containers
            docker compose up -d --build

            echo "=== Waiting for services to start ==="
            sleep 45

            echo "=== Container status ==="
            docker compose ps -a

            echo "=== Backend logs ==="
            docker compose logs backend --tail=50

            echo "=== Frontend logs ==="
            docker compose logs frontend --tail=20

            echo "=== Testing backend directly ==="
            curl -f http://localhost:5001/api/health || echo "Backend direct test failed"

            echo "=== Testing via nginx ==="
            curl -f http://localhost/api/health || echo "Nginx proxy test failed"

            echo "=== Deployment completed ==="
